{"version":3,"sources":["Vertex.js","Edge.js","Sketch.js","Sketchpad.js","SavedSketch.js","Sketchbook.js","index.js"],"names":["Vertex","this","props","vertex","id","x","y","isSelected","borderRadius","selectionColor","displayVertexData","color","isHovering","className","style","top","left","border","background","onClick","selectElement","bind","onMouseEnter","mouseEnterElement","onMouseLeave","mouseLeaveElement","visibility","edges","length","React","Component","Edge","edge","height","loopRadius","isBridge","bridgeColor","isArc","arrowSize","edgeWidth","isLoop","borderInput","width","zIndex","toString","transform","theta","Sketch","update","isGrabber","mouseMoveCTX","deltas","clientX","mouseMoveInitPos","clientY","i","selectedVertices","widthCheck","vertexRadius","padWidth","heightCheck","padHeight","state","vertices","find","positionVertexEdges","setState","renameSketch","e","name","target","value","toggleGrabber","resetIDs","vertexIDCount","edgeIDCount","isVertex","push","selectedEdges","deselectAll","clearPad","s","deleteSelection","j","filter","vertex1","vertex2","drawVertex","canDrawVertex","padOrigin","selectionBorderRadius","displayingVertexData","stateVertex","toggleDisplayVertexData","toggleCountsDisplay","displayingCounts","v","generateEdges","drawEdge","generateArc","targetVertex","ed","positionEdge","offsetX","offsetY","stateEdge","parallelEdges","parallelEdgeFinder","calculateEdgeOffsets","z","temp","x1","x2","y1","y2","dx","dy","Math","sqrt","atan2","loopVertices","identifyBridges","idBridges","dfs","bridges","determineBipartite","visitedVertices","isBp","bpHelper","unseenVertex","findUnseenVertex","edgeSpacing","windowCenter","window","innerWidth","innerHeight","loadSketch","JSON","parse","findLoadSketchCookie","document","cookie","addEventListener","pressKey","setInterval","type","placeholder","onChange","saveSketch","stringify","map","code","colorVertices","sketches","decodeURIComponent","split","parts","sketch","drawLoadVertex","drawLoadEdge","v1","v2","visitedEdges","vertexA","vertexB","slope","isOdd","distance","val","abs","start","finish","paths","dfsHelper","shortestPath","currentVertex","path","mColor","adj","determineAdjacentVertex","unseenVertices","Sketchpad","mouseCTX","onMouseMove","getMouseCTX","SavedSketch","Sketchbook","App","currentView","currentSketch","ReactDom","render","getElementById"],"mappings":"qNAIqBA,G,4KACT,IAAD,EAC8FC,KAAKC,MAAMC,OAAxGC,EADD,EACCA,GAAIC,EADL,EACKA,EAAGC,EADR,EACQA,EAAGC,EADX,EACWA,WAAYC,EADvB,EACuBA,aAAcC,EADrC,EACqCA,eAAgBC,EADrD,EACqDA,kBAAmBC,EADxE,EACwEA,MAAOC,EAD/E,EAC+EA,WACtF,OACI,qBAAKC,UAAU,SAASC,MACtB,CACEC,IAAKR,EAAaD,EAAIE,EAAe,KAAOF,EAAI,KAChDU,KAAMT,EAAaF,EAAIG,EAAe,KAAOH,EAAI,KACjDY,OAAQV,EAAaC,EAAe,MAAQC,EAAiB,KAE7DS,WAAYN,EAAa,OAASD,GAEpCQ,QAASlB,KAAKC,MAAMkB,cAAcC,KAAKpB,MAAM,EAAMG,GAChDkB,aAAcrB,KAAKC,MAAMqB,kBAAkBF,KAAKpB,MAAM,EAAMG,GAC5DoB,aAAcvB,KAAKC,MAAMuB,kBAAkBJ,KAAKpB,MAAM,EAAMG,GAVjE,SAYE,sBAAKS,UAAU,aAAaC,MAAO,CACjCY,WAAYhB,EAAoB,UAAY,UAD9C,UAGE,qBAAKG,UAAU,WAAf,SACE,4BAAIT,MAEN,qBAAKS,UAAU,eAAf,SACE,4BAAIZ,KAAKC,MAAMC,OAAOwB,MAAMC,oB,GAvBNC,IAAMC,YCArBC,E,uKACT,IAAD,EAIH9B,KAAKC,MAAM8B,KAFb5B,EAFK,EAELA,GAAIC,EAFC,EAEDA,EAAGC,EAFF,EAEEA,EAAG2B,EAFL,EAEKA,OAAQzB,EAFb,EAEaA,aAAcC,EAF3B,EAE2BA,eAAgBF,EAF3C,EAE2CA,WAAY2B,EAFvD,EAEuDA,WAAYC,EAFnE,EAEmEA,SAAUC,EAF7E,EAE6EA,YAAaC,EAF1F,EAE0FA,MAAOC,EAFjG,EAEiGA,UACtGC,EAHK,EAGLA,UAAW3B,EAHN,EAGMA,WAAY4B,EAHlB,EAGkBA,OAGrBC,EAAc,KAYlB,OAXGD,GACE5B,GAAcL,KACfkC,EAAcjC,EAAe,MAAQC,GAGnCF,EACFkC,EAAcjC,EAAe,MAAQC,EAEjC0B,IACFM,EAAcjC,EAAe,MAAQ4B,GAEpCI,EACH,qBAAK3B,UAAU,OAAOC,MAAO,CAC3BC,IAAKR,EAAaD,EAAIE,EAAe,KAAOF,EAAI,KAChDU,KAAMT,EAAaF,EAAIG,EAAe,KAAOH,EAAI,KACjD4B,OAAQ,EAAIC,EAAa,KACzBQ,MAAO,EAAIR,EAAa,KACxBjB,OAAQwB,EACRE,OAAQ1C,KAAKC,MAAM8B,KAAKW,OAAOC,YAE5BzB,QAASlB,KAAKC,MAAMkB,cAAcC,KAAKpB,MAAM,EAAOG,GACpDkB,aAAcrB,KAAKC,MAAMqB,kBAAkBF,KAAKpB,MAAM,EAAOG,GAC7DoB,aAAcvB,KAAKC,MAAMuB,kBAAkBJ,KAAKpB,MAAM,EAAOG,GAVlE,SAYE,qBAAKS,UAAU,UAAUC,MAAO,CAC9BY,WAAYW,EAAQ,UAAY,SAChCrB,KAAM,EAAIkB,EAAaI,EAAY,EAAIC,EAAY,EAAI,KACvDxB,IAAKmB,EAAaI,EAAY,EAAIC,EAAY,EAAI,UAItD,qBAAK1B,UAAU,OAAOC,MAAO,CAC3BmB,OAAQA,EAAS,KACjBlB,IAAKR,EAAaD,EAAIE,EAAe,KAAOF,EAAI,KAChDU,KAAMT,EAAaF,EAAIG,EAAe,KAAOH,EAAI,KACjDwC,UAAW,UAAY5C,KAAKC,MAAM8B,KAAKc,MAAMF,WAAa,OAC1D3B,OAAQwB,EACRvB,WAAYN,EAAa,OAAS,SAE/BO,QAASlB,KAAKC,MAAMkB,cAAcC,KAAKpB,MAAM,EAAOG,GACpDkB,aAAcrB,KAAKC,MAAMqB,kBAAkBF,KAAKpB,MAAM,EAAOG,GAC7DoB,aAAcvB,KAAKC,MAAMuB,kBAAkBJ,KAAKpB,MAAM,EAAOG,GAVlE,SAYE,qBAAKS,UAAU,UAAUC,MAAO,CAC9BY,WAAYW,EAAQ,UAAY,SAChCtB,IAAKkB,EAAS,EAAIK,EAAY,EAAI,KAClCtB,OAAQsB,EAAY,EAAIC,EAAY,GAAK,c,GAtDnBV,IAAMC,WCEnBiB,E,kDACjB,WAAY7C,GAAQ,IAAD,uBACjB,cAAMA,IA2FR8C,OAAS,WACP,GAAI,EAAKC,UAAW,CAClB,IAAMC,EAAe,EAAKhD,MAAMgD,eAChC,IAAKA,EAAc,OAEnB,IAAMC,EAAS,CAACD,EAAaE,QAAU,EAAKC,iBAAiB,GAAIH,EAAaI,QAAU,EAAKD,iBAAiB,IAC9G,EAAKA,iBAAmB,CAACH,EAAaE,QAASF,EAAaI,SAC5D,IANkB,eAMTC,GAEP,IAAMlD,EAAI,EAAKmD,iBAAiBD,GAAGlD,EAAI8C,EAAO,GACxC7C,EAAI,EAAKkD,iBAAiBD,GAAGjD,EAAI6C,EAAO,GAExCM,EAAapD,EAAI,EAAI,EAAKqD,cAAgBrD,EAAI,EAAKsD,SAAW,EAAI,EAAKD,aACvEE,EAActD,EAAI,EAAI,EAAKoD,cAAgBpD,EAAI,EAAKuD,UAAY,EAAI,EAAKH,aAC3ED,IACF,EAAKD,iBAAiBD,GAAGlD,EAAIA,EAC7B,EAAKyD,MAAMC,SAASC,MAAK,SAAC7D,GAAD,OAAYA,EAAOC,KAAO,EAAKoD,iBAAiBD,GAAGnD,MAAIC,EAAIA,GAElFuD,IACF,EAAKJ,iBAAiBD,GAAGjD,EAAIA,EAC7B,EAAKwD,MAAMC,SAASC,MAAK,SAAC7D,GAAD,OAAYA,EAAOC,KAAO,EAAKoD,iBAAiBD,GAAGnD,MAAIE,EAAIA,GAGtF,EAAK2D,oBAAoB,EAAKT,iBAAiBD,KAhBxCA,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAAM,EAA/CA,GAkBT,EAAKW,SAAS,EAAKJ,SArHJ,EAyHnBK,aAAa,SAACC,GACV,IAAMN,EAAM,EAAKA,MACjBA,EAAMO,KAAKD,EAAEE,OAAOC,MACpB,EAAKL,SAASJ,IA5HC,EA+HnBU,cAAgB,WACZ,EAAKvB,WAAW,EAAKA,WAhIN,EAmInBwB,SAAS,WACL,IAAMX,EAAQ,EAAKA,MACnBA,EAAMY,cAAgB,EACtBZ,EAAMa,YAAc,EACpB,IAAK,IAAIpB,EAAI,EAAGA,EAAI,EAAKQ,SAASnC,OAAQ2B,IACtC,EAAKQ,SAASR,GAAGnD,GAAK0D,EAAMY,gBAC5BZ,EAAMC,SAASR,GAAGnD,GAAK,EAAK2D,SAASR,GAAGnD,GAE5C,IAAK,IAAImD,EAAI,EAAGA,EAAI,EAAK5B,MAAMC,OAAQ2B,IACnC,EAAK5B,MAAM4B,GAAGnD,GAAK0D,EAAMa,cACzBb,EAAMnC,MAAM4B,GAAGnD,GAAK,EAAKuB,MAAM4B,GAAGnD,GAEtC,EAAK8D,SAASJ,IA/IC,EAkPnB1C,cAAgB,SAACwD,EAAUxE,GACvB,GAAIwE,EAAU,CACV,IAAMzE,EAAS,EAAK4D,SAASC,MAAK,SAAC7D,GAAD,OAAYA,EAAOC,KAAOA,KAC5DD,EAAOI,YAAa,EACpB,EAAKiD,iBAAiBqB,KAAK1E,OACxB,CACH,IAAM6B,EAAO,EAAKL,MAAMqC,MAAK,SAAChC,GAAD,OAAUA,EAAK5B,KAAOA,KACnD4B,EAAKzB,YAAa,EAClB,EAAKuE,cAAcD,KAAK7C,GAE5B,EAAKkC,SAAS,EAAKJ,QA5PJ,EA+PnBiB,YAAc,WAEV,IAAK,IAAIxB,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAC9C,EAAKC,iBAAiBD,GAAGhD,YAAa,EAG1C,IAAK,IAAIgD,EAAI,EAAGA,EAAI,EAAKuB,cAAclD,OAAQ2B,IAC3C,EAAKuB,cAAcvB,GAAGhD,YAAa,EAEvC,EAAKiD,iBAAmB,GACxB,EAAKsB,cAAgB,GACjB,EAAK7B,YACL,EAAKA,WAAY,GACrB,EAAKiB,SAAS,EAAKJ,QA5QJ,EA+QnBkB,SAAW,WACP,IAAMC,EAAI,EAAKnB,MACfmB,EAAElB,SAAW,GACbkB,EAAEtD,MAAQ,GACV,EAAKoC,SAAW,GAChB,EAAKpC,MAAQ,GACb,EAAKuC,SAASe,IArRC,EAwRnBC,gBAAkB,WAGd,IAFA,IAAMpB,EAAQ,EAAKA,MADC,WAGXP,GACL,IAJgB,eAIP4B,GACA,EAAKL,cAAcd,MAAK,SAAAhC,GAAI,OAAIA,EAAK5B,KAAO,EAAKoD,iBAAiBD,GAAG5B,MAAMwD,OAC5E,EAAKL,cAAcD,KAAK,EAAKrB,iBAAiBD,GAAG5B,MAAMwD,KAFtDA,EAAI,EAAGA,EAAI,EAAK3B,iBAAiBD,GAAG5B,MAAMC,OAAQuD,IAAM,EAAxDA,IADJ5B,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAAM,EAA/CA,GAST,IAZoB,eAYXA,GACLO,EAAMnC,MAAQmC,EAAMnC,MAAMyD,QAAO,SAAApD,GAAI,OAAIA,EAAK5B,KAAO,EAAK0E,cAAcvB,GAAGnD,MAE3E,IAAMiF,EAAU,EAAKP,cAAcvB,GAAG8B,QAChCC,EAAU,EAAKR,cAAcvB,GAAG+B,QAEtCD,EAAQ1D,MAAQ0D,EAAQ1D,MAAMyD,QAAO,SAACpD,GAAD,OAAUA,EAAK5B,KAAO,EAAK0E,cAAcvB,GAAGnD,MAC5E,EAAK0E,cAAcvB,GAAGf,SACvB8C,EAAQ3D,MAAQ2D,EAAQ3D,MAAMyD,QAAO,SAACpD,GAAD,OAAUA,EAAK5B,KAAO,EAAK0E,cAAcvB,GAAGnD,OAIrF,EAAKuB,MAAQ,EAAKA,MAAMyD,QAAO,SAAApD,GAAI,OAAIA,EAAK5B,KAAO,EAAK0E,cAAcvB,GAAGnD,OAZpEmD,EAAI,EAAGA,EAAI,EAAKuB,cAAclD,OAAQ2B,IAAM,EAA5CA,GAgBT,IA5BoB,eA4BXA,GACLO,EAAMC,SAAWD,EAAMC,SAASqB,QAAO,SAAAjF,GAAM,OAAIA,EAAOC,KAAO,EAAKoD,iBAAiBD,GAAGnD,MACxF,EAAK2D,SAAW,EAAKA,SAASqB,QAAO,SAAAjF,GAAM,OAAIA,EAAOC,KAAO,EAAKoD,iBAAiBD,GAAGnD,OAFjFmD,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAAM,EAA/CA,GAMT,IAAI,IAAIA,EAAE,EAAEA,EAAE,EAAKQ,SAASnC,OAAO2B,IAC/B,EAAKU,oBAAoB,EAAKF,SAASR,IAG3C,EAAKC,iBAAmB,GACxB,EAAKsB,cAAgB,GAErB,EAAKZ,SAASJ,IAjUC,EAqUnByB,WAAa,SAACnB,GACZ,GAAI,EAAKoB,cAAe,CACtB,IAAM1B,EAAQ,EAAKA,MACb3D,EAAS,CACbC,GAAI0D,EAAMY,gBACVrE,EAAG+D,EAAEhB,QAAU,EAAKM,aAAe,EAAK+B,UAAU,GAClDnF,EAAG8D,EAAEd,QAAU,EAAKI,aAAe,EAAK+B,UAAU,GAClDjF,aAAc,EAAKkF,sBACnBjF,eAAgB,EAAKA,eACrBC,kBAAmB,EAAKiF,qBACxBhE,MAAO,GACPhB,MAAO,OACPC,YAAY,GAERgF,EAAc,CAClBxF,GAAID,EAAOC,GACXC,EAAGF,EAAOE,EACVC,EAAGH,EAAOG,EACVqB,MAAO,GACPhB,MAAO,QAGT,EAAKoD,SAASc,KAAK1E,GACnB,EAAK2D,MAAMC,SAASc,KAAKe,GACzB,EAAK1B,SAASJ,KA7VC,EAgXnB+B,wBAAwB,WACpB,EAAKF,sBAAwB,EAAKA,qBAClC,IAAK,IAAIpC,EAAI,EAAGA,EAAI,EAAKQ,SAASnC,OAAQ2B,IACtC,EAAKQ,SAASR,GAAG7C,kBAAoB,EAAKiF,qBAE9C,EAAKzB,SAAS,EAAKJ,QArXJ,EAwXnBgC,oBAAoB,WAChB,EAAKC,kBAAoB,EAAKA,iBAC9B,EAAK7B,SAAS,EAAKJ,QA1XJ,EAwYnBvC,kBAAoB,SAACqD,EAAUxE,IAC7B,EAAKoF,eAAgB,EACjBZ,GAEa,EAAKb,SAASC,MAAK,SAACgC,GAAD,OAAOA,EAAE5F,KAAOA,KAC3CQ,YAAa,EAGP,EAAKe,MAAMqC,MAAK,SAACI,GAAD,OAAOA,EAAEhE,KAAOA,KACxCQ,YAAa,EAEpB,EAAKsD,SAAS,EAAKJ,QAnZF,EAsZnBrC,kBAAoB,SAACmD,EAAUxE,IAC7B,EAAKoF,eAAgB,EACjBZ,GAEa,EAAKb,SAASC,MAAK,SAACgC,GAAD,OAAOA,EAAE5F,KAAOA,KAC3CQ,YAAa,EAGP,EAAKe,MAAMqC,MAAK,SAACI,GAAD,OAAOA,EAAEhE,KAAOA,KACxCQ,YAAa,EAEpB,EAAKsD,SAAS,EAAKJ,QAjaF,EAqanBmC,cAAgB,WACZ,KAAI,EAAKzC,iBAAiB5B,OAAS,GAAnC,CACA,IAAK,IAAI2B,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAAK,CACnD,IAAK,IAAI4B,EAAI,EAAGA,EAAI,EAAK3B,iBAAiB5B,OAAQuD,IAG1C5B,IAAM4B,GAAM,EAAK3B,iBAAiBD,GAAGhD,YAAe,EAAKiD,iBAAiB2B,GAAG5E,YAGjF,EAAK2F,SAAS,EAAK1C,iBAAiBD,GAAI,EAAKC,iBAAiB2B,IAElE,EAAK3B,iBAAiBD,GAAGhD,YAAa,EAG1C,EAAKiD,iBAAmB,GACxB,EAAKsB,cAAgB,GAErB,EAAKZ,SAAS,EAAKJ,SAtbJ,EAybnBqC,YAAY,WACV,IAIInE,EAJE8B,EAAQ,EAAKA,MAEkB,IAAjC,EAAKN,iBAAiB5B,QAAiD,IAAjC,EAAK4B,iBAAiB5B,SAI3B,IAAjC,EAAK4B,iBAAiB5B,OACxBI,EAAO,EAAKkE,SAAS,EAAK1C,iBAAiB,GAAI,EAAKA,iBAAiB,KAErExB,EAAO,EAAKkE,SAAS,EAAK1C,iBAAiB,GAAI,EAAKA,iBAAiB,KAChE4C,aAAe,EAAK5C,iBAAiB,GAE5CxB,EAAKM,UAAY,EAAKA,UACtBN,EAAKK,OAAQ,EAEHyB,EAAMnC,MAAMqC,MAAK,SAACqC,GAAD,OAAQA,EAAGjG,KAAO4B,EAAK5B,MAChDiC,OAAQ,EAEV,EAAKiE,aAAatE,GAClB,EAAKkC,SAASJ,GACd,EAAKiB,gBA9cY,EAidnBmB,SAAW,SAACb,EAASC,GACnB,IAAMxB,EAAQ,EAAKA,MAEb9B,EAAO,CACX5B,GAAI0D,EAAMa,cACVU,QAASA,EACTC,QAASA,EACT9E,aAAc,EAAKkF,sBACnBjF,eAAgB,EAAKA,eACrB+B,OAAQ6C,EAAQjF,KAAOkF,EAAQlF,GAC/B8B,WAAY,EAAKA,WACjBqE,QAAS,EACTC,QAAS,EACT7D,OAAQ,EACRP,YAAa,EAAKA,YAClBG,UAAW,EAAKA,UAChBF,OAAO,EACPzB,YAAY,GAER6F,EAAY,CAChBrG,GAAI4B,EAAK5B,GACTiF,QAASrD,EAAKqD,QAAQjF,GACtBkF,QAAStD,EAAKsD,QAAQlF,IAExBiF,EAAQ1D,MAAMkD,KAAK7C,GAEdA,EAAKQ,QACR8C,EAAQ3D,MAAMkD,KAAK7C,GACrB,EAAKL,MAAMkD,KAAK7C,GAChB8B,EAAMnC,MAAMkD,KAAK4B,GAGjB,IAAMC,EAAgB,EAAKC,mBAAmBtB,EAASC,GACvD,GAAIoB,EAAc9E,OAAS,EAAG,CAE5B,EAAKgF,qBAAqBF,EAAerB,EAASC,GAGlD,IADA,IAAIuB,EAAI,IACCtD,EAAI,EAAGA,EAAImD,EAAc9E,OAAQ2B,IAEpC8B,EAAQjF,KAAOkF,EAAQlF,KACzBsG,EAAcnD,GAAGZ,OAASkE,KAE5B,EAAKP,aAAaI,EAAcnD,SAKlC,EAAK+C,aAAatE,GAIpB,OADA,EAAKkC,SAASJ,GACP9B,GArgBU,EAsjBnBsE,aAAe,SAACtE,GACZ,GAAGA,EAAKQ,OAAQ,CACZ,IAAInC,EAAI2B,EAAKqD,QAAQhF,EAAI,EAAKqD,aAAe,EAAI,EAAKnB,UAClDjC,EAAI0B,EAAKqD,QAAQ/E,EAAI,EAAKoD,aAAe,EAAI,EAAKnB,UAClDP,EAAKzB,aACLF,GAAK,EAAE,EAAKqF,sBACZpF,GAAK,EAAE,EAAKoF,uBAEhB1D,EAAK3B,EAAIA,EACT2B,EAAK1B,EAAIA,MAER,CACD,GAAG0B,EAAKK,OAASL,EAAKqD,QAAQjF,KAAK4B,EAAKoE,aAAahG,GAAG,CAEpD,IAAM0G,EAAO9E,EAAKsD,QAClBtD,EAAKsD,QAAUtD,EAAKqD,QACpBrD,EAAKqD,QAAUyB,EAGnB,IAAIC,EAAK/E,EAAKqD,QAAQhF,EAClB2G,EAAKhF,EAAKsD,QAAQjF,EAClB4G,EAAKjF,EAAKqD,QAAQ/E,EAClB4G,EAAKlF,EAAKsD,QAAQhF,EAGlB6G,EAAKJ,EAAKC,EACVI,EAAKF,EAAKD,EACVhF,EAASoF,KAAKC,KAAMH,EAAKA,EAAOC,EAAKA,GAGrCtE,EAAQuE,KAAKE,MAAMJ,EAAIC,GAGvB/G,GAAM0G,EAAKC,GAAM,EAAKhF,EAAKuE,QAC3BjG,GAAM2G,EAAKC,GAAM,EAAKlF,EAAKwE,QAE/BxE,EAAKC,OAASA,EACdD,EAAK1B,EAAIA,EAAK2B,EAAS,EAAM,EAAKyB,aAClC1B,EAAK3B,EAAIA,EAAK,EAAKkC,UAAY,EAAM,EAAKmB,aAC1C1B,EAAKc,MAAQA,IA7lBF,EAmnBnB0E,aAAe,WAEX,IAAK,IAAIjE,EAAI,EAAGA,EAAI,EAAKC,iBAAiB5B,OAAQ2B,IAC9C,EAAK2C,SAAS,EAAK1C,iBAAiBD,GAAI,EAAKC,iBAAiBD,IAElE,EAAKwB,eAxnBU,EA6qBnB0C,gBAAgB,WAIZ,GADA,EAAKC,WAAa,EAAKA,UAClB,EAAKA,UAUN,IAJI,IAAD,WAIMnE,GAGL,GAAI,EAAK5B,MAAM4B,GAAGf,OACd,iBACJ,IAAM6C,EAAU,EAAK1D,MAAM4B,GAAG8B,QACxBC,EAAU,EAAK3D,MAAM4B,GAAG+B,QAC9BD,EAAQ1D,MAAQ0D,EAAQ1D,MAAMyD,QAAO,SAACpD,GAAD,OAAUA,EAAK5B,KAAO,EAAKuB,MAAM4B,GAAGnD,MACzEkF,EAAQ3D,MAAQ2D,EAAQ3D,MAAMyD,QAAO,SAACpD,GAAD,OAAUA,EAAK5B,KAAO,EAAKuB,MAAM4B,GAAGnD,MAIrD,IADP,EAAKuH,IAAItC,EAASC,GACtB1D,SACL,EAAKD,MAAM4B,GAAGpB,UAAW,EACzB,EAAKyF,QAAQ/C,KAAK,EAAKlD,MAAM4B,KAGjC8B,EAAQ1D,MAAMkD,KAAK,EAAKlD,MAAM4B,IAC9B+B,EAAQ3D,MAAMkD,KAAK,EAAKlD,MAAM4B,KAlBzBA,EAAI,EAAGA,EAAI,EAAK5B,MAAMC,OAAQ2B,IAAK,EAAnCA,OAVQ,CAEjB,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAKqE,QAAQhG,OAAQ2B,IACrC,EAAKqE,QAAQrE,GAAGpB,UAAW,EAE/B,EAAKyF,QAAU,GA0BnB,EAAK1D,SAAS,EAAKJ,QAhtBJ,EAsvBnB+D,mBAAqB,WACjB,GAA6B,IAAzB,EAAK9D,SAASnC,OAAlB,CAKA,IAAIkG,EAAkB,GAEtB,IADA,EAAKC,MAAO,EACLD,EAAgBlG,SAAW,EAAKmC,SAASnC,SAC5C,EAAKoG,SAAS,EAAKjE,SAAS,GAAI,EAAG+D,GAC/B,EAAKC,OAF2C,CAGhD,IAAME,EAAe,EAAKC,iBAAiBJ,GAC3C,EAAKE,SAASC,EAAc,EAAGH,SAVnC,EAAKC,MAAO,GArvBlB,EAAKrE,aAAe,KACpB,EAAKnB,UAAY,EACjB,EAAK4F,YAAc,KAAO,EAAK5F,UAC/B,EAAKmD,sBAAwB,EAC7B,EAAKpD,UAAY,GACjB,EAAKJ,WAAa,GAClB,EAAKyB,SAAW,IAChB,EAAKE,UAAY,IACjB,EAAKuE,aAAe,CAACC,OAAOC,WAAa,EAAGD,OAAOE,YAAc,GACjE,EAAK9C,UAAY,CAAC,EAAK2C,aAAa,GAAK,EAAKzE,SAAW,EAAG,EAAKyE,aAAa,GAAK,EAAKvE,UAAY,GAEpG,EAAKpD,eAAiB,aACtB,EAAK2B,YAAc,YACnB,EAAKoD,eAAgB,EACrB,EAAKvC,WAAY,EACjB,EAAK8C,kBAAmB,EACxB,EAAKgC,KAAO,QACZ,EAAK1E,iBAAmB,CAAC,EAAG,GAE5B,EAAKU,SAAW,GAChB,EAAKpC,MAAQ,GACb,EAAK6B,iBAAmB,GACxB,EAAKsB,cAAgB,GACrB,EAAK8C,QAAU,GAEf,IAAMY,EAAaC,KAAKC,MAAM,EAAKC,wBA5BlB,OA8BjBC,SAASC,OAAS,oDACdL,GAEF,EAAK1E,MAAQ0E,EACb,EAAKA,WAAWA,IAEhB,EAAK1E,MAAQ,CACXC,SAAU,GACVW,cAAe,EACf/C,MAAO,GACPgD,YAAa,EACbN,KAAM,IAIVuE,SAASE,iBAAiB,YAAY,SAAA1E,GAAC,OAAI,EAAK2E,SAAS3E,MAEzD4E,YAAY,EAAKhG,OAAQ,IA/CR,E,qDAkDT,IAAD,OAGL,OAFF/C,KAAKmI,aAAa,CAACC,OAAOC,WAAW,EAAGD,OAAOE,YAAY,GAC3DtI,KAAKwF,UAAU,CAACxF,KAAKmI,aAAa,GAAGnI,KAAK0D,SAAS,EAAG1D,KAAKmI,aAAa,GAAGnI,KAAK4D,UAAU,GAEpF,sBAAKzD,GAAG,aAAR,UACI,uBAAO6I,KAAK,OAAOC,YAAajJ,KAAK6D,MAAMO,KAAMA,KAAK,aAAa8E,SAAUlJ,KAAKkE,eAClF,wBAAQ/D,GAAG,aAAae,QAASlB,KAAKC,MAAMkJ,WAAW/H,KAAKpB,KAAMwI,KAAKY,UAAUpJ,KAAK6D,QAAtF,yBAGA,sBAAK1D,GAAG,MAAMe,QAASlB,KAAKsF,WAA5B,UACI,sBAAKnF,GAAG,UAAUU,MAAO,CAACY,WAAYzB,KAAK8F,iBAAmB,UAAY,UAA1E,UACK9F,KAAK4H,qBADV,OAES5H,KAAK8D,SAASnC,OAAO,uBAF9B,OAGS3B,KAAK0B,MAAMC,OAHpB,IAG4B,uBAH5B,QAIU3B,KAAK8H,KAAKnF,WAJpB,IAIgC,0BAE/B3C,KAAK8D,SAASuF,KAAI,SAACnJ,GAAD,OACf,cAAC,EAAD,CAAwBA,OAAQA,EAAQiB,cAAe,EAAKA,cACpDG,kBAAmB,EAAKA,kBAAmBE,kBAAmB,EAAKA,mBAD9DtB,EAAOC,OAGvBH,KAAK0B,MAAM2H,KAAI,SAACtH,GAAD,OACZ,cAAC,EAAD,CAAoBA,KAAMA,EAAMZ,cAAe,EAAKA,cAC9CG,kBAAmB,EAAKA,kBAAmBE,kBAAmB,EAAKA,mBAD9DO,EAAK5B,UAIxB,sBAAKA,GAAG,iBAAR,UACI,wBAAQA,GAAG,WAAWe,QAASlB,KAAK+E,SAApC,uBACA,wBAAQ5E,GAAG,kBAAkBe,QAASlB,KAAKiF,gBAA3C,8BACA,wBAAQ9E,GAAG,cAAce,QAASlB,KAAK8E,YAAvC,0BACA,wBAAQ3E,GAAG,gBAAgBe,QAASlB,KAAKgG,cAAzC,4BACA,wBAAQ7F,GAAG,aAAae,QAASlB,KAAKuH,aAAtC,kBACA,wBAAQpH,GAAG,UAAUe,QAASlB,KAAKuE,cAAnC,qBACA,wBAAQpE,GAAG,WAAWe,QAASlB,KAAK4F,wBAApC,kBACA,wBAAQzF,GAAG,WAAWe,QAASlB,KAAK6F,oBAApC,oBACA,wBAAQ1F,GAAG,WAAWe,QAASlB,KAAKwE,SAApC,wBACA,wBAAQrE,GAAG,YAAYe,QAASlB,KAAKwH,gBAArC,qBACA,wBAAQrH,GAAG,cAAce,QAASlB,KAAKkG,YAAvC,yB,+BA4DP/B,GACP,OAAQA,EAAEmF,MACR,IAAK,OAEHtJ,KAAKgG,gBACL,MACF,IAAK,OAEHhG,KAAKiF,kBACL,MACF,IAAK,OAEHjF,KAAK6F,sBACL,MACF,IAAK,OAEH7F,KAAK4F,0BACL,MACF,IAAK,OAEH5F,KAAK8E,cACL,MACF,IAAK,OAEH9E,KAAKuH,eACL,MACF,IAAK,OAEHvH,KAAKwE,WACL,MACF,IAAK,OAEHxE,KAAKwH,kBACL,MACF,IAAK,OAEHxH,KAAKkG,cACL,MAEF,IAAK,SACHlG,KAAKuJ,cAAc,SACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,SACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,OACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,UACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,UACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,SACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,QACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,UACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,SACnB,MACF,IAAK,SACHvJ,KAAKuJ,cAAc,W,6CAMvB,IAAIC,EAASC,mBAAmBd,SAASC,QACzCY,EAASA,EAASE,MAAM,KACxB,IAAI,IAAIpG,EAAE,EAAEA,EAAEkG,EAAS7H,OAAO2B,IAAI,CAChC,IAAMqG,EAAMH,EAASlG,GAAGoG,MAAM,KAC9B,GAAc,gBAAXC,EAAM,GACP,OAAOA,EAAM,GAGjB,MAAO,S,iCAGEC,GAET,IAAI,IAAItG,EAAE,EAAEA,EAAEsG,EAAO9F,SAASnC,OAAO2B,IACnCtD,KAAK6J,eAAeD,EAAO9F,SAASR,IAGtC,IAAI,IAAIA,EAAE,EAAEA,EAAEsG,EAAOlI,MAAMC,OAAO2B,IAChCtD,KAAK8J,aAAaF,EAAOlI,MAAM4B,M,qCAoHpBqC,GACb,IAAMzF,EAAO,CACXC,GAAIwF,EAAYxF,GAChBC,EAAGuF,EAAYvF,EACfC,EAAGsF,EAAYtF,EACfE,aAAcP,KAAKyF,sBACnBjF,eAAgBR,KAAKQ,eACrBC,kBAAmBT,KAAK0F,qBACxBhE,MAAO,GACPhB,MAAOiF,EAAYjF,MACnBC,YAAY,GAEdX,KAAK8D,SAASc,KAAK1E,K,oCAgBPQ,GAEZ,IAFoB,IAAD,OACbmD,EAAQ7D,KAAK6D,MADA,WAEVP,GACP,EAAKC,iBAAiBD,GAAG5C,MAAQA,EAClBmD,EAAMC,SAASC,MAAK,SAACgC,GAAD,OAAOA,EAAE5F,KAAO,EAAKoD,iBAAiBD,GAAGnD,MACrEO,MAAQA,GAHR4C,EAAI,EAAGA,EAAItD,KAAKuD,iBAAiB5B,OAAQ2B,IAAM,EAA/CA,GAKTtD,KAAKiE,SAASJ,K,mCAoIH2C,GACX,IAAMuD,EAAG/J,KAAK8D,SAASC,MAAK,SAACgC,GAAD,OAAKA,EAAE5F,KAAKqG,EAAUpB,WAC5C4E,EAAGhK,KAAK8D,SAASC,MAAK,SAACgC,GAAD,OAAKA,EAAE5F,KAAKqG,EAAUnB,WAC5CtD,EAAO,CACX5B,GAAIqG,EAAUrG,GACdiF,QAAS2E,EACT1E,QAAS2E,EACTzJ,aAAcP,KAAKyF,sBACnBjF,eAAgBR,KAAKQ,eACrB+B,OAAQwH,EAAG5J,KAAK6J,EAAG7J,GACnB8B,WAAYjC,KAAKiC,WACjBqE,QAAS,EACTC,QAAS,EACT7D,OAAQ,EACRP,YAAanC,KAAKmC,YAClBG,UAAWtC,KAAKsC,UAChBF,MAAOoE,EAAUpE,MACjBzB,YAAY,GAEdoJ,EAAGrI,MAAMkD,KAAK7C,GACVA,EAAKQ,QACPyH,EAAGtI,MAAMkD,KAAK7C,GAEhB/B,KAAK0B,MAAMkD,KAAK7C,GAGhB,IAAM0E,EAAgBzG,KAAK0G,mBAAmBqD,EAAIC,GAClD,GAAIvD,EAAc9E,OAAS,EAAG,CAE5B3B,KAAK2G,qBAAqBF,EAAesD,EAAIC,GAG7C,IADA,IAAIpD,EAAI,IACCtD,EAAI,EAAGA,EAAImD,EAAc9E,OAAQ2B,IAEpCyG,EAAG5J,KAAO6J,EAAG7J,KACfsG,EAAcnD,GAAGZ,OAASkE,KAE5B5G,KAAKqG,aAAaI,EAAcnD,SAKlCtD,KAAKqG,aAAatE,K,0CA+CF7B,GAIhB,IAJwB,IAAD,OAGnB+J,EAAa,GAHM,WAIf3G,GACJ,GAAI2G,EAAalG,MAAK,SAAAhC,GAAI,OAAIA,EAAK5B,KAAOD,EAAOwB,MAAM4B,GAAGnD,MACtD,iBACJ,IAAMiF,EAAUlF,EAAOwB,MAAM4B,GAAG8B,QAC1BC,EAAUnF,EAAOwB,MAAM4B,GAAG+B,QAC1BoB,EAAgB,EAAKC,mBAAmBtB,EAASC,GACvD,EAAKsB,qBAAqBF,EAAerB,EAASC,GAClD,IAAK,IAAIH,EAAI,EAAGA,EAAIuB,EAAc9E,OAAQuD,IACtC+E,EAAarF,KAAK6B,EAAcvB,IAChC,EAAKmB,aAAaI,EAAcvB,KAThC5B,EAAE,EAAEA,EAAEpD,EAAOwB,MAAMC,OAAO2B,IAAK,EAA/BA,K,yCAsBO8B,EAASC,GAGxB,IADA,IAAIoB,EAAgB,GACXnD,EAAI,EAAGA,EAAI8B,EAAQ1D,MAAMC,OAAQ2B,IAAK,CAC3C,IAAM4G,EAAU9E,EAAQ1D,MAAM4B,GAAG8B,QAC3B+E,EAAU/E,EAAQ1D,MAAM4B,GAAG+B,SAC5BD,EAAQjF,KAAO+J,EAAQ/J,IAAMkF,EAAQlF,KAAOgK,EAAQhK,IACjDiF,EAAQjF,KAAOgK,EAAQhK,IAAMkF,EAAQlF,KAAO+J,EAAQ/J,KACxDsG,EAAc7B,KAAKQ,EAAQ1D,MAAM4B,IAGzC,OAAOmD,I,2CAGUA,EAAerB,EAASC,GAEzC,GAAID,EAAQjF,KAAOkF,EAAQlF,GAEvB,IADA,IAAI8B,EAAajC,KAAKiC,WACbqB,EAAI,EAAGA,EAAImD,EAAc9E,OAAQ2B,IACtCmD,EAAcnD,GAAGrB,WAAaA,EAC9BA,GAAcjC,KAAKkI,gBAEpB,CACH,IAAIkC,GAAS/E,EAAQhF,EAAI+E,EAAQ/E,IAAMgF,EAAQjF,EAAIgF,EAAQhF,GAC3DgK,GAAS,EAAIA,EAIb,IAFA,IAAMC,EAAQ5D,EAAc9E,OAAS,IAAM,EACvC2I,EAAWD,EAAQ,EAAIrK,KAAKkI,YAAc,EACrC5E,EAAI,EAAGA,EAAImD,EAAc9E,OAAQ2B,IAAK,CAE3C,IAAMlD,EAAKkK,EAAWlD,KAAKC,KAAK,EAAK+C,EAAQA,GACvC/J,EAAI+J,EAAQhK,EAOlB,GAJAqG,EAAcnD,GAAGgD,QAAUlG,EAC3BqG,EAAcnD,GAAGiD,QAAUlG,EAGtBgK,GAAS/G,EAAI,IAAM,IAAQ+G,GAAS/G,EAAI,IAAM,EAAI,CAEnD,IAAIiH,EAAMnD,KAAKoD,IAAIF,GAAYtK,KAAKkI,YACpCoC,EAAWA,EAAW,GAAKC,EAAMA,EAGrCD,IAAa,M,0BA4CrBG,EAAOC,GAEP,IAAIC,EAAQ,GAIZ,GAHA3K,KAAK4K,UAAUH,EAAO,GAAIE,EAAOD,GAGZ,IAAjBC,EAAMhJ,OAAc,OAAOgJ,EAE/B,IADA,IAAIE,EAAeF,EAAM,GAChBrH,EAAI,EAAGA,EAAIqH,EAAMhJ,OAAQ2B,IAC1BqH,EAAMrH,GAAG3B,OAASkJ,EAAalJ,SAC/BkJ,EAAeF,EAAMrH,IAG7B,OAAOuH,I,gCAGDC,EAAeC,EAAMJ,EAAOD,GAAQ,IAAD,OAEzC,GADAK,EAAKnG,KAAKkG,GACPA,EAAc3K,KAAKuK,EAAOvK,GAI7B,IANyC,eAMjCmD,GACAyH,EAAKhH,MAAK,SAAAgC,GAAC,OAAEA,EAAE5F,KAAK2K,EAAcpJ,MAAM4B,GAAG8B,QAAQjF,MAI9C4K,EAAKhH,MAAK,SAAAgC,GAAC,OAAEA,EAAE5F,KAAK2K,EAAcpJ,MAAM4B,GAAG+B,QAAQlF,OAExD,EAAKyK,UAAUE,EAAcpJ,MAAM4B,GAAG+B,QAAS0F,EAAMJ,EAAOD,GAJ5D,EAAKE,UAAUE,EAAcpJ,MAAM4B,GAAG8B,QAAS2F,EAAMJ,EAAOD,IAH5DpH,EAAE,EAAEA,EAAEwH,EAAcpJ,MAAMC,OAAO2B,IAAK,EAAtCA,QAHJqH,EAAM/F,KAAKmG,K,+BAiCVD,EAAeE,EAAQnD,GAC5B,GAAIiD,IAEc,IAAd9K,KAAK8H,KAIT,GAAID,EAAgBlG,OAAO,GAAKkG,EAAgB9D,MAAK,SAAC7D,GAAD,OAAYA,EAAOC,KAAO2K,EAAc3K,MACrF2K,EAAcE,SAAWA,IACzBhL,KAAK8H,MAAO,OAFpB,CAQAgD,EAAcE,OAASA,EACvBnD,EAAgBjD,KAAKkG,GACHE,EAAH,IAAXA,EAAuB,EACb,EAGd,IAAK,IAAI1H,EAAI,EAAGA,EAAIwH,EAAcpJ,MAAMC,OAAQ2B,IAC5C,IAAGwH,EAAcpJ,MAAM4B,GAAGf,OAA1B,CAEA,IAAM0I,EAAMjL,KAAKkL,wBAAwBJ,EAAeA,EAAcpJ,MAAM4B,GAAG8B,QAAS0F,EAAcpJ,MAAM4B,GAAG+B,SAC/GrF,KAAK+H,SAASkD,EAAKD,EAAQnD,O,8CAIXiD,EAAe1F,EAASC,GAC5C,OAAGyF,EAAc3K,KAAKiF,EAAQjF,GACnBkF,EAEAD,I,uCAGEyC,GACb,IAAIsD,EAAiBnL,KAAK8D,SAASqB,QAAO,SAACjF,GAAD,OAAa2H,EAAgB9D,MAAK,SAACgC,GAAD,OAAOA,EAAE5F,KAAOD,EAAOC,SACnG,OAA8B,IAA1BgL,EAAexJ,OAAqB,KACjCwJ,EAAe,O,GA/yBMvJ,IAAMC,WCDrBuJ,E,kDACjB,WAAYnL,GAAQ,IAAD,8BACf,cAAMA,IACDoL,SAAW,KAFD,E,qDAKT,IAAD,OACL,OACI,yBAASC,YAAa,SAACnH,GAAD,OAAO,EAAKkH,SAAWlH,GAA7C,SACI,cAAC,EAAD,CAAQlB,aAAcjD,KAAKuL,YAAYnK,KAAKpB,MAAOmJ,WAAYnJ,KAAKC,MAAMkJ,WAClEZ,WAAYvI,KAAKC,MAAMsI,iB,oCAMvC,OAAOvI,KAAKqL,a,GAhBmBzJ,IAAMC,WCFxB2J,E,uKAGb,OACI,6BAAKxL,KAAKC,MAAM2J,OAAOxF,W,GAJMxC,IAAMC,WCA1B4J,E,uKAKjB,IAJQ,IAAD,OACHjC,EAAWb,SAASC,OAAOc,MAAM,KAEjCtJ,EAAI,GACCkD,EAAI,EAAGA,EAAIkG,EAAS7H,OAAQ2B,IAAK,CACxC,IAAIjD,EAAImJ,EAASlG,GAAGoG,MAAM,KAC1BtJ,EAAEwE,KAAK4D,KAAKC,MAAMpI,EAAE,KAEtB,OACI,gCACGD,EAAEiJ,KAAI,SAACO,GAAD,OACH,qBAAuB1I,QAAS,EAAKjB,MAAMsI,WAAWnH,KAAK,EAAMwI,GAAjE,SACE,cAAC,EAAD,CAAaA,OAAQA,KADbA,EAAOxF,SAIrB,wBAAQlD,QAASlB,KAAKC,MAAMsI,WAAWnH,KAAKpB,KAAM,MAAlD,iC,GAhB8B4B,IAAMC,WCExC6J,E,kDACF,WAAYzL,GAAQ,IAAD,8BACf,cAAMA,IAkBVsI,WAAW,SAACqB,GAEV,IAAM/F,EAAQ,EAAKA,MACnBA,EAAM8H,YAAc,YACpBhD,SAASC,OAAS,cAAgBJ,KAAKY,UAAUQ,GACjD,EAAK3F,SAASJ,IAxBG,EA2BnBsF,WAAW,SAACS,GAER,IAAM/F,EAAQ,EAAKA,MACnBA,EAAM8H,YAAc,aAGpB,IACMvH,EADEoE,KAAKC,MAAMmB,GACNxF,KACbuE,SAASC,OAAOxE,EAAK,IAAIwF,EACzB,EAAK3F,SAASJ,IAlCd,EAAKA,MAAM,CACP8H,YAAa,YACbC,cAAe,MAJJ,E,qDASf,OAAQ5L,KAAK6D,MAAM8H,aACf,IAAK,aACD,OAAO,cAAC,EAAD,CAAYpD,WAAYvI,KAAKuI,aACxC,IAAK,YACD,OAAO,cAAC,EAAD,CAAWY,WAAYnJ,KAAKmJ,aACvC,QACI,OAAO,iD,GAhBLvH,IAAMC,WAyCxBgK,IAASC,OAAO,cAAC,EAAD,IAAQnD,SAASoD,eAAe,U","file":"static/js/main.18dd5fed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/main.css';\r\n\r\n//Each vertex that is on the pad\r\nexport default class Vertex extends React.Component {\r\n  render() {\r\n    const { id, x, y, isSelected, borderRadius, selectionColor, displayVertexData, color, isHovering } = this.props.vertex;\r\n    return (\r\n        <div className='vertex' style={\r\n          {\r\n            top: isSelected ? y - borderRadius + 'px' : y + 'px',\r\n            left: isSelected ? x - borderRadius + 'px' : x + 'px',\r\n            border: isSelected ? borderRadius + 'px ' + selectionColor : null,\r\n            // for some reason I have to use pink, I can't use the selection color\r\n            background: isHovering ? 'pink' : color\r\n          }\r\n        } onClick={this.props.selectElement.bind(this, true, id)}\r\n             onMouseEnter={this.props.mouseEnterElement.bind(this, true, id)}\r\n             onMouseLeave={this.props.mouseLeaveElement.bind(this, true, id)}>\r\n\r\n          <div className='vertexData' style={{\r\n            visibility: displayVertexData ? 'visible' : 'hidden'\r\n          }}>\r\n            <div className='vertexID'>\r\n              <p>{id}</p>\r\n            </div>\r\n            <div className='vertexDegree'>\r\n              <p>{this.props.vertex.edges.length}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport './styles/main.css';\r\n\r\n//Each edge that is on the pad\r\nexport default class Edge extends React.Component {\r\n  render() {\r\n    const {\r\n      id, x, y, height, borderRadius, selectionColor, isSelected, loopRadius, isBridge, bridgeColor, isArc, arrowSize,\r\n      edgeWidth, isHovering, isLoop\r\n    } = this.props.edge;\r\n    //determine border\r\n    let borderInput = null;\r\n    if(isLoop){\r\n      if(isHovering || isSelected)\r\n        borderInput = borderRadius + 'px ' + selectionColor;\r\n    }\r\n    else {\r\n      if (isSelected)\r\n        borderInput = borderRadius + 'px ' + selectionColor;\r\n      else\r\n        if (isBridge)\r\n          borderInput = borderRadius + 'px ' + bridgeColor;\r\n    }\r\n    return isLoop ? (\r\n        <div className='loop' style={{\r\n          top: isSelected ? y - borderRadius + 'px' : y + 'px',\r\n          left: isSelected ? x - borderRadius + 'px' : x + 'px',\r\n          height: 2 * loopRadius + 'px',\r\n          width: 2 * loopRadius + 'px',\r\n          border: borderInput,\r\n          zIndex: this.props.edge.zIndex.toString()\r\n        }}\r\n             onClick={this.props.selectElement.bind(this, false, id)}\r\n             onMouseEnter={this.props.mouseEnterElement.bind(this, false, id)}\r\n             onMouseLeave={this.props.mouseLeaveElement.bind(this, false, id)}>\r\n          {/*If it's an Arc I need an arrow*/}\r\n          <div className='arrowUp' style={{\r\n            visibility: isArc ? 'visible' : 'hidden',\r\n            left: 2 * loopRadius - arrowSize / 2 - edgeWidth / 2 + 'px',\r\n            top: loopRadius - arrowSize / 2 - edgeWidth / 2 + 'px'\r\n          }}/>\r\n        </div>\r\n    ) : (\r\n        <div className='edge' style={{\r\n          height: height + 'px',\r\n          top: isSelected ? y - borderRadius + 'px' : y + 'px',\r\n          left: isSelected ? x - borderRadius + 'px' : x + 'px',\r\n          transform: 'rotate(' + this.props.edge.theta.toString() + 'rad)',\r\n          border: borderInput,\r\n          background: isHovering ? 'pink' : 'black'\r\n        }}\r\n             onClick={this.props.selectElement.bind(this, false, id)}\r\n             onMouseEnter={this.props.mouseEnterElement.bind(this, false, id)}\r\n             onMouseLeave={this.props.mouseLeaveElement.bind(this, false, id)}>\r\n          {/*If it's an Arc I need an arrow*/}\r\n          <div className='arrowUp' style={{\r\n            visibility: isArc ? 'visible' : 'hidden',\r\n            top: height / 2 - arrowSize / 2 + 'px',\r\n            left: -(arrowSize / 2 + edgeWidth / 2) + 'px'\r\n          }}/>\r\n        </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './styles/main.css';\r\nimport Vertex from \"./Vertex\";\r\nimport Edge from \"./Edge\";\r\n\r\n//The Pad where the drawing happens\r\nexport default class Sketch extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.vertexRadius = 25 / 2;\r\n      this.edgeWidth = 5;\r\n      this.edgeSpacing = 2.25 * this.edgeWidth;\r\n      this.selectionBorderRadius = 4;\r\n      this.arrowSize = 10;\r\n      this.loopRadius = 25;\r\n      this.padWidth = 750;\r\n      this.padHeight = 500;\r\n      this.windowCenter = [window.innerWidth / 2, window.innerHeight / 2];\r\n      this.padOrigin = [this.windowCenter[0] - this.padWidth / 2, this.windowCenter[1] - this.padHeight / 2];\r\n\r\n      this.selectionColor = 'solid pink';\r\n      this.bridgeColor = 'solid red';\r\n      this.canDrawVertex = true;\r\n      this.isGrabber = false;\r\n      this.displayingCounts = false;\r\n      this.isBp = 'false';\r\n      this.mouseMoveInitPos = [0, 0];\r\n\r\n      this.vertices = [];\r\n      this.edges = [];\r\n      this.selectedVertices = [];\r\n      this.selectedEdges = [];\r\n      this.bridges = [];\r\n\r\n      const loadSketch = JSON.parse(this.findLoadSketchCookie());\r\n      //expire the cookie\r\n      document.cookie = 'loadSketch=;expires=Thu, 18 Dec 2013 12:00:00 UTC';\r\n      if (loadSketch) {\r\n        //gonna need to recreate some stuff\r\n        this.state = loadSketch;\r\n        this.loadSketch(loadSketch);\r\n      } else {\r\n        this.state = {\r\n          vertices: [],\r\n          vertexIDCount: 0,\r\n          edges: [],\r\n          edgeIDCount: 0,\r\n          name: ''\r\n        }\r\n      }\r\n\r\n      document.addEventListener('keypress', e => this.pressKey(e))\r\n      //update at 33ms = ~30pfs\r\n      setInterval(this.update, 33);\r\n    }\r\n\r\n    render() {\r\n      this.windowCenter=[window.innerWidth/2, window.innerHeight/2];\r\n      this.padOrigin=[this.windowCenter[0]-this.padWidth/2, this.windowCenter[1]-this.padHeight/2];\r\n        return (\r\n            <div id='sketchRoot'>\r\n                <input type='text' placeholder={this.state.name} name='sketchName' onChange={this.renameSketch}/>\r\n                <button id='saveSketch' onClick={this.props.saveSketch.bind(this, JSON.stringify(this.state))}>Save\r\n                    Sketch\r\n                </button>\r\n                <div id='pad' onClick={this.drawVertex}>\r\n                    <div id='padData' style={{visibility: this.displayingCounts ? 'visible' : 'hidden'}}>\r\n                        {this.determineBipartite()}\r\n                        v = {this.vertices.length}<br/>\r\n                        e = {this.edges.length} <br/>\r\n                        BP = {this.isBp.toString()} <br/>\r\n                    </div>\r\n                    {this.vertices.map((vertex) => (\r\n                        <Vertex key={vertex.id} vertex={vertex} selectElement={this.selectElement}\r\n                                mouseEnterElement={this.mouseEnterElement} mouseLeaveElement={this.mouseLeaveElement}/>\r\n                    ))}\r\n                    {this.edges.map((edge) => (\r\n                        <Edge key={edge.id} edge={edge} selectElement={this.selectElement}\r\n                              mouseEnterElement={this.mouseEnterElement} mouseLeaveElement={this.mouseLeaveElement}/>\r\n                    ))}\r\n                </div>\r\n                <div id='sketchCommands'>\r\n                    <button id='clearPad' onClick={this.clearPad}>Clear Pad</button>\r\n                    <button id='deleteSelection' onClick={this.deleteSelection}>Delete Selection</button>\r\n                    <button id='deselectAll' onClick={this.deselectAll}>Deselect All</button>\r\n                    <button id='generateEdges' onClick={this.generateEdges}>Generate Edges</button>\r\n                    <button id='loopButton' onClick={this.loopVertices}>Loop</button>\r\n                    <button id='grabber' onClick={this.toggleGrabber}>Grabber</button>\r\n                    <button id='idDegree' onClick={this.toggleDisplayVertexData}>ID's</button>\r\n                    <button id='veCounts' onClick={this.toggleCountsDisplay}>Counts</button>\r\n                    <button id='resetIDs' onClick={this.resetIDs}>Reset ID's</button>\r\n                    <button id='idBridges' onClick={this.identifyBridges}>Bridges</button>\r\n                    <button id='generateArc' onClick={this.generateArc}>Arc</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    update = () => {\r\n      if (this.isGrabber) {\r\n        const mouseMoveCTX = this.props.mouseMoveCTX();\r\n        if (!mouseMoveCTX) return;\r\n        //loop through selected vertices, reposition, reset state\r\n        const deltas = [mouseMoveCTX.clientX - this.mouseMoveInitPos[0], mouseMoveCTX.clientY - this.mouseMoveInitPos[1]];\r\n        this.mouseMoveInitPos = [mouseMoveCTX.clientX, mouseMoveCTX.clientY];\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n          //move the vertex\r\n          const x = this.selectedVertices[i].x + deltas[0];\r\n          const y = this.selectedVertices[i].y + deltas[1];\r\n          //check bounds\r\n          const widthCheck = x > 2 * this.vertexRadius && x < this.padWidth - 2 * this.vertexRadius;\r\n          const heightCheck = y > 2 * this.vertexRadius && y < this.padHeight - 2 * this.vertexRadius;\r\n          if (widthCheck) {\r\n            this.selectedVertices[i].x = x;\r\n            this.state.vertices.find((vertex) => vertex.id === this.selectedVertices[i].id).x = x;\r\n          }\r\n          if (heightCheck) {\r\n            this.selectedVertices[i].y = y;\r\n            this.state.vertices.find((vertex) => vertex.id === this.selectedVertices[i].id).y = y;\r\n          }\r\n          //reposition its edges\r\n          this.positionVertexEdges(this.selectedVertices[i]);\r\n        }\r\n        this.setState(this.state);\r\n      }\r\n    }\r\n\r\n    renameSketch=(e)=>{\r\n        const state=this.state;\r\n        state.name=e.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    toggleGrabber = () =>{\r\n        this.isGrabber=!this.isGrabber;\r\n    }\r\n\r\n    resetIDs=()=> {\r\n        const state = this.state;\r\n        state.vertexIDCount = 0;\r\n        state.edgeIDCount = 0;\r\n        for (let i = 0; i < this.vertices.length; i++) {\r\n            this.vertices[i].id = state.vertexIDCount++;\r\n            state.vertices[i].id = this.vertices[i].id;\r\n        }\r\n        for (let i = 0; i < this.edges.length; i++) {\r\n            this.edges[i].id = state.edgeIDCount++;\r\n            state.edges[i].id = this.edges[i].id;\r\n        }\r\n        this.setState(state);\r\n    }\r\n\r\n    pressKey(e){\r\n      switch (e.code) {\r\n        case 'KeyE':\r\n          //generate edges\r\n          this.generateEdges();\r\n          break;\r\n        case 'KeyD':\r\n          //delete selection\r\n          this.deleteSelection();\r\n          break;\r\n        case 'KeyC':\r\n          //toggle pad counts\r\n          this.toggleCountsDisplay();\r\n          break;\r\n        case 'KeyI':\r\n          //toggle vertex data\r\n          this.toggleDisplayVertexData();\r\n          break;\r\n        case 'KeyS':\r\n          //deselect\r\n          this.deselectAll();\r\n          break;\r\n        case 'KeyL':\r\n          //loops\r\n          this.loopVertices();\r\n          break;\r\n        case 'KeyR':\r\n          //reset ID's\r\n          this.resetIDs();\r\n          break;\r\n        case 'KeyB':\r\n          //show bridges\r\n          this.identifyBridges();\r\n          break;\r\n        case 'KeyA':\r\n          //arc\r\n          this.generateArc();\r\n          break;\r\n          //colorings\r\n        case 'Digit1':\r\n          this.colorVertices('black');\r\n          break;\r\n        case 'Digit2':\r\n          this.colorVertices('white');\r\n          break;\r\n        case 'Digit3':\r\n          this.colorVertices('red');\r\n          break;\r\n        case 'Digit4':\r\n          this.colorVertices('orange');\r\n          break;\r\n        case 'Digit5':\r\n          this.colorVertices('yellow');\r\n          break;\r\n        case 'Digit6':\r\n          this.colorVertices('green');\r\n          break;\r\n        case 'Digit7':\r\n          this.colorVertices('blue');\r\n          break;\r\n        case 'Digit8':\r\n          this.colorVertices('purple');\r\n          break;\r\n        case 'Digit9':\r\n          this.colorVertices('brown');\r\n          break;\r\n        case 'Digit0':\r\n          this.colorVertices('cyan');\r\n          break;\r\n      }\r\n    }\r\n\r\n    findLoadSketchCookie(){\r\n      let sketches=decodeURIComponent(document.cookie);\r\n      sketches=sketches.split(';');\r\n      for(let i=0;i<sketches.length;i++){\r\n        const parts=sketches[i].split('=');\r\n        if(parts[0]===' loadSketch'){\r\n          return parts[1];\r\n        }\r\n      }\r\n      return 'null';\r\n    }\r\n\r\n    loadSketch(sketch){\r\n      //build all the vertices first\r\n      for(let i=0;i<sketch.vertices.length;i++){\r\n        this.drawLoadVertex(sketch.vertices[i]);\r\n      }\r\n      //build all the edges\r\n      for(let i=0;i<sketch.edges.length;i++){\r\n        this.drawLoadEdge(sketch.edges[i]);\r\n      }\r\n    }\r\n\r\n    //Selection and Deletion\r\n    selectElement = (isVertex, id) => {\r\n        if (isVertex) {\r\n            const vertex = this.vertices.find((vertex) => vertex.id === id);\r\n            vertex.isSelected = true;\r\n            this.selectedVertices.push(vertex);\r\n        } else {\r\n            const edge = this.edges.find((edge) => edge.id === id);\r\n            edge.isSelected = true;\r\n            this.selectedEdges.push(edge);\r\n        }\r\n        this.setState(this.state);\r\n    }\r\n\r\n    deselectAll = () => {\r\n        //deselect vertices\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n            this.selectedVertices[i].isSelected = false;\r\n        }\r\n        //deselect edges\r\n        for (let i = 0; i < this.selectedEdges.length; i++) {\r\n            this.selectedEdges[i].isSelected = false;\r\n        }\r\n        this.selectedVertices = [];\r\n        this.selectedEdges = [];\r\n        if (this.isGrabber)\r\n            this.isGrabber = false;\r\n        this.setState(this.state);\r\n    }\r\n\r\n    clearPad = () => {\r\n        const s = this.state;\r\n        s.vertices = [];\r\n        s.edges = [];\r\n        this.vertices = [];\r\n        this.edges = [];\r\n        this.setState(s);\r\n    }\r\n\r\n    deleteSelection = () => {\r\n        const state = this.state;\r\n        //add all vertex edges to selectedEdges\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n            for (let j = 0; j < this.selectedVertices[i].edges.length; j++) {\r\n                if (!this.selectedEdges.find(edge => edge.id === this.selectedVertices[i].edges[j])) {\r\n                    this.selectedEdges.push(this.selectedVertices[i].edges[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        //delete edges\r\n        for (let i = 0; i < this.selectedEdges.length; i++) {\r\n            state.edges = state.edges.filter(edge => edge.id !== this.selectedEdges[i].id);\r\n            //remove from connected vertices\r\n            const vertex1 = this.selectedEdges[i].vertex1;\r\n            const vertex2 = this.selectedEdges[i].vertex2;\r\n\r\n            vertex1.edges = vertex1.edges.filter((edge) => edge.id !== this.selectedEdges[i].id);\r\n            if (!this.selectedEdges[i].isLoop) {\r\n                vertex2.edges = vertex2.edges.filter((edge) => edge.id !== this.selectedEdges[i].id);\r\n            }\r\n\r\n            //remove from all edges\r\n            this.edges = this.edges.filter(edge => edge.id !== this.selectedEdges[i].id);\r\n        }\r\n\r\n        //delete all vertices\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n            state.vertices = state.vertices.filter(vertex => vertex.id !== this.selectedVertices[i].id);\r\n            this.vertices = this.vertices.filter(vertex => vertex.id !== this.selectedVertices[i].id);\r\n        }\r\n\r\n        //recalculate edges\r\n        for(let i=0;i<this.vertices.length;i++) {\r\n            this.positionVertexEdges(this.vertices[i]);\r\n        }\r\n\r\n        this.selectedVertices = [];\r\n        this.selectedEdges = [];\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    //Vertex Handling\r\n    drawVertex = (e) => {\r\n      if (this.canDrawVertex) {\r\n        const state = this.state;\r\n        const vertex = {\r\n          id: state.vertexIDCount++,\r\n          x: e.clientX - this.vertexRadius - this.padOrigin[0],\r\n          y: e.clientY - this.vertexRadius - this.padOrigin[1],\r\n          borderRadius: this.selectionBorderRadius,\r\n          selectionColor: this.selectionColor,\r\n          displayVertexData: this.displayingVertexData,\r\n          edges: [],\r\n          color: 'blue',\r\n          isHovering: false\r\n        }\r\n        const stateVertex = {\r\n          id: vertex.id,\r\n          x: vertex.x,\r\n          y: vertex.y,\r\n          edges: [],\r\n          color: 'blue'\r\n        }\r\n\r\n        this.vertices.push(vertex);\r\n        this.state.vertices.push(stateVertex);\r\n        this.setState(state);\r\n      }\r\n    }\r\n\r\n    drawLoadVertex(stateVertex){\r\n      const vertex={\r\n        id: stateVertex.id,\r\n        x: stateVertex.x,\r\n        y: stateVertex.y,\r\n        borderRadius: this.selectionBorderRadius,\r\n        selectionColor: this.selectionColor,\r\n        displayVertexData: this.displayingVertexData,\r\n        edges: [],\r\n        color: stateVertex.color,\r\n        isHovering: false\r\n      }\r\n      this.vertices.push(vertex);\r\n    }\r\n\r\n    toggleDisplayVertexData=()=> {\r\n        this.displayingVertexData = !this.displayingVertexData;\r\n        for (let i = 0; i < this.vertices.length; i++) {\r\n            this.vertices[i].displayVertexData = this.displayingVertexData;\r\n        }\r\n        this.setState(this.state);\r\n    }\r\n\r\n    toggleCountsDisplay=()=> {\r\n        this.displayingCounts = !this.displayingCounts;\r\n        this.setState(this.state);\r\n    }\r\n\r\n    colorVertices(color) {\r\n      const state = this.state;\r\n      for (let i = 0; i < this.selectedVertices.length; i++) {\r\n        this.selectedVertices[i].color = color;\r\n        const vertex = state.vertices.find((v) => v.id === this.selectedVertices[i].id);\r\n        vertex.color = color;\r\n      }\r\n      this.setState(state);\r\n    }\r\n\r\n    //Mouse Handling\r\n    mouseEnterElement = (isVertex, id) => {\r\n      this.canDrawVertex = false;\r\n      if (isVertex) {\r\n        //find the vertex tell it that it's hovering\r\n        const vertex = this.vertices.find((v) => v.id === id);\r\n        vertex.isHovering = true;\r\n      } else {\r\n        //same but for edge\r\n        const edge = this.edges.find((e) => e.id === id);\r\n        edge.isHovering = true;\r\n      }\r\n      this.setState(this.state);\r\n    }\r\n\r\n    mouseLeaveElement = (isVertex, id) => {\r\n      this.canDrawVertex = true;\r\n      if (isVertex) {\r\n        //find the vertex tell it that it's hovering\r\n        const vertex = this.vertices.find((v) => v.id === id);\r\n        vertex.isHovering = false;\r\n      } else {\r\n        //same but for edge\r\n        const edge = this.edges.find((e) => e.id === id);\r\n        edge.isHovering = false;\r\n      }\r\n      this.setState(this.state);\r\n    }\r\n\r\n    //Edges\r\n    generateEdges = () => {\r\n        if (this.selectedVertices.length < 2) return;\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n            for (let j = 0; j < this.selectedVertices.length; j++) {\r\n                //don't draw loops\r\n                //don't wanna draw the same edge twice\r\n                if (i === j || !this.selectedVertices[i].isSelected || !this.selectedVertices[j].isSelected)\r\n                    continue;\r\n\r\n                this.drawEdge(this.selectedVertices[i], this.selectedVertices[j]);\r\n            }\r\n            this.selectedVertices[i].isSelected = false;\r\n        }\r\n\r\n        this.selectedVertices = [];\r\n        this.selectedEdges = [];\r\n\r\n        this.setState(this.state);\r\n    }\r\n\r\n    generateArc=()=> {\r\n      const state = this.state;\r\n      //arcs can only be loops and edges\r\n      if (this.selectedVertices.length !== 1 && this.selectedVertices.length !== 2)\r\n        return;\r\n      let edge;\r\n      //loop or edge?\r\n      if (this.selectedVertices.length === 1) {\r\n        edge = this.drawEdge(this.selectedVertices[0], this.selectedVertices[0]);\r\n      } else {\r\n        edge = this.drawEdge(this.selectedVertices[0], this.selectedVertices[1]);\r\n        edge.targetVertex = this.selectedVertices[1];\r\n      }\r\n      edge.arrowSize = this.arrowSize;\r\n      edge.isArc = true;\r\n      //make the stateEdge an arc too\r\n      const e = state.edges.find((ed) => ed.id === edge.id);\r\n      e.isArc = true;\r\n\r\n      this.positionEdge(edge);\r\n      this.setState(state);\r\n      this.deselectAll();\r\n    }\r\n\r\n    drawEdge = (vertex1, vertex2) => {\r\n      const state = this.state;\r\n      //make the edge\r\n      const edge = {\r\n        id: state.edgeIDCount++,\r\n        vertex1: vertex1,\r\n        vertex2: vertex2,\r\n        borderRadius: this.selectionBorderRadius,\r\n        selectionColor: this.selectionColor,\r\n        isLoop: vertex1.id === vertex2.id,\r\n        loopRadius: this.loopRadius,\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        zIndex: 1,\r\n        bridgeColor: this.bridgeColor,\r\n        edgeWidth: this.edgeWidth,\r\n        isArc: false,\r\n        isHovering: false\r\n      }\r\n      const stateEdge = {\r\n        id: edge.id,\r\n        vertex1: edge.vertex1.id,\r\n        vertex2: edge.vertex2.id\r\n      }\r\n      vertex1.edges.push(edge);\r\n      //don't add loops twice\r\n      if (!edge.isLoop)\r\n        vertex2.edges.push(edge);\r\n      this.edges.push(edge);\r\n      state.edges.push(stateEdge);\r\n\r\n      //check for parallel Edges\r\n      const parallelEdges = this.parallelEdgeFinder(vertex1, vertex2);\r\n      if (parallelEdges.length > 1) {\r\n        //recalculate parallel Edge positions\r\n        this.calculateEdgeOffsets(parallelEdges, vertex1, vertex2);\r\n        //position all parallel edges\r\n        let z = 9000;\r\n        for (let i = 0; i < parallelEdges.length; i++) {\r\n          //are they loops?\r\n          if (vertex1.id === vertex2.id) {\r\n            parallelEdges[i].zIndex = z--;\r\n          }\r\n          this.positionEdge(parallelEdges[i]);\r\n        }\r\n\r\n      } else {\r\n        //position it\r\n        this.positionEdge(edge);\r\n      }\r\n\r\n      this.setState(state);\r\n      return edge;\r\n    }\r\n\r\n    drawLoadEdge(stateEdge){\r\n      const v1=this.vertices.find((v)=>v.id===stateEdge.vertex1);\r\n      const v2=this.vertices.find((v)=>v.id===stateEdge.vertex2);\r\n      const edge = {\r\n        id: stateEdge.id,\r\n        vertex1: v1,\r\n        vertex2: v2,\r\n        borderRadius: this.selectionBorderRadius,\r\n        selectionColor: this.selectionColor,\r\n        isLoop: v1.id===v2.id,\r\n        loopRadius: this.loopRadius,\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        zIndex: 1,\r\n        bridgeColor: this.bridgeColor,\r\n        edgeWidth: this.edgeWidth,\r\n        isArc: stateEdge.isArc,\r\n        isHovering: false\r\n      }\r\n      v1.edges.push(edge);\r\n      if(!edge.isLoop) {\r\n        v2.edges.push(edge);\r\n      }\r\n      this.edges.push(edge);\r\n\r\n      //check for parallel Edges\r\n      const parallelEdges = this.parallelEdgeFinder(v1, v2);\r\n      if (parallelEdges.length > 1) {\r\n        //recalculate parallel Edge positions\r\n        this.calculateEdgeOffsets(parallelEdges, v1, v2);\r\n        //position all parallel edges\r\n        let z = 9000;\r\n        for (let i = 0; i < parallelEdges.length; i++) {\r\n          //are they loops?\r\n          if (v1.id === v2.id) {\r\n            parallelEdges[i].zIndex = z--;\r\n          }\r\n          this.positionEdge(parallelEdges[i]);\r\n        }\r\n\r\n      } else {\r\n        //position it\r\n        this.positionEdge(edge);\r\n      }\r\n    }\r\n\r\n    positionEdge = (edge) => {\r\n        if(edge.isLoop) {\r\n            let x = edge.vertex1.x + this.vertexRadius - 2 * this.edgeWidth;\r\n            let y = edge.vertex1.y + this.vertexRadius - 2 * this.edgeWidth;\r\n            if (edge.isSelected) {\r\n                x += 2*this.selectionBorderRadius;\r\n                y += 2*this.selectionBorderRadius;\r\n            }\r\n            edge.x = x;\r\n            edge.y = y;\r\n        }\r\n        else {\r\n            if(edge.isArc && edge.vertex1.id!==edge.targetVertex.id){\r\n                //switcharoo\r\n                const temp = edge.vertex2;\r\n                edge.vertex2 = edge.vertex1;\r\n                edge.vertex1 = temp;\r\n            }\r\n            //math time\r\n            let x1 = edge.vertex1.x;\r\n            let x2 = edge.vertex2.x;\r\n            let y1 = edge.vertex1.y;\r\n            let y2 = edge.vertex2.y;\r\n\r\n            //first, find the height\r\n            let dx = x1 - x2;\r\n            let dy = y2 - y1;\r\n            let height = Math.sqrt((dx * dx) + (dy * dy));\r\n\r\n            //second, find the angle\r\n            let theta = Math.atan2(dx, dy);\r\n\r\n            //third, find the position\r\n            let x = ((x1 + x2) / 2) + edge.offsetX;\r\n            let y = ((y1 + y2) / 2) + edge.offsetY;\r\n\r\n            edge.height = height;\r\n            edge.y = y - (height / 2) + (this.vertexRadius);\r\n            edge.x = x - (this.edgeWidth / 2) + (this.vertexRadius);\r\n            edge.theta = theta;\r\n        }\r\n    }\r\n\r\n    positionVertexEdges(vertex){\r\n        //repositions a moved vertices edges\r\n        //find parallel edge clusters\r\n        let visitedEdges=[];\r\n        for(let i=0;i<vertex.edges.length;i++) {\r\n            if (visitedEdges.find(edge => edge.id === vertex.edges[i].id))\r\n                continue;\r\n            const vertex1 = vertex.edges[i].vertex1;\r\n            const vertex2 = vertex.edges[i].vertex2;\r\n            const parallelEdges = this.parallelEdgeFinder(vertex1, vertex2);\r\n            this.calculateEdgeOffsets(parallelEdges, vertex1, vertex2);\r\n            for (let j = 0; j < parallelEdges.length; j++) {\r\n                visitedEdges.push(parallelEdges[j]);\r\n                this.positionEdge(parallelEdges[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    loopVertices = () => {\r\n        //loop through selected vertices, adding loops to each\r\n        for (let i = 0; i < this.selectedVertices.length; i++) {\r\n            this.drawEdge(this.selectedVertices[i], this.selectedVertices[i]);\r\n        }\r\n        this.deselectAll();\r\n    }\r\n\r\n    parallelEdgeFinder(vertex1, vertex2) {\r\n        //returns a list of parallel edges between 2 vertices\r\n        let parallelEdges = [];\r\n        for (let i = 0; i < vertex1.edges.length; i++) {\r\n            const vertexA = vertex1.edges[i].vertex1;\r\n            const vertexB = vertex1.edges[i].vertex2;\r\n            if ((vertex1.id === vertexA.id && vertex2.id === vertexB.id)\r\n                || (vertex1.id === vertexB.id && vertex2.id === vertexA.id)) {\r\n                parallelEdges.push(vertex1.edges[i]);\r\n            }\r\n        }\r\n        return parallelEdges;\r\n    }\r\n\r\n    calculateEdgeOffsets(parallelEdges, vertex1, vertex2) {\r\n        //loop check\r\n        if (vertex1.id === vertex2.id) {\r\n            let loopRadius = this.loopRadius;\r\n            for (let i = 0; i < parallelEdges.length; i++) {\r\n                parallelEdges[i].loopRadius = loopRadius;\r\n                loopRadius += this.edgeSpacing;\r\n            }\r\n        } else {\r\n            let slope = (vertex2.y - vertex1.y) / (vertex2.x - vertex1.x);\r\n            slope = -1 / slope;\r\n            //check parity\r\n            const isOdd = parallelEdges.length % 2 === 1;\r\n            let distance = isOdd ? 0 : this.edgeSpacing / 2;\r\n            for (let i = 0; i < parallelEdges.length; i++) {\r\n                //calculate the offsets\r\n                const x = (distance / Math.sqrt(1 + (slope * slope)));\r\n                const y = slope * x;\r\n\r\n                //apply the offsets\r\n                parallelEdges[i].offsetX = x;\r\n                parallelEdges[i].offsetY = y;\r\n\r\n                //increment the magnitude of distance?\r\n                if ((isOdd && i % 2 === 0) || (!isOdd && i % 2 === 1)) {\r\n                    //increment odd sets on even i's and even sets on odd i's\r\n                    let val = Math.abs(distance) + this.edgeSpacing;\r\n                    distance = distance < 0 ? -val : val;\r\n                }\r\n\r\n                distance *= -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Advanced Features\r\n    identifyBridges=()=> {\r\n        //loop through edges, remove it. Can I still get from one vertex to the other? add the edge back\r\n        //Currently won't work for digraphs\r\n        this.idBridges = !this.idBridges;\r\n        if (!this.idBridges) {\r\n            //turn off bridge id\r\n            for (let i = 0; i < this.bridges.length; i++) {\r\n                this.bridges[i].isBridge = false;\r\n            }\r\n            this.bridges = [];\r\n        } else {\r\n            //highlight bridges in some color\r\n            //loop through all edges, remove them one at a time. Does the graph become disconnected? If so, it's a bridge\r\n            //check for disconnect via dfs\r\n            for (let i = 0; i < this.edges.length; i++) {\r\n                //remove the edge from its vertices\r\n                //loops can't be bridges\r\n                if (this.edges[i].isLoop)\r\n                    continue;\r\n                const vertex1 = this.edges[i].vertex1;\r\n                const vertex2 = this.edges[i].vertex2;\r\n                vertex1.edges = vertex1.edges.filter((edge) => edge.id !== this.edges[i].id);\r\n                vertex2.edges = vertex2.edges.filter((edge) => edge.id !== this.edges[i].id);\r\n\r\n                //did the removal of this edge disconnect the two vertices?\r\n                const path = this.dfs(vertex1, vertex2);\r\n                if (path.length === 0) {\r\n                    this.edges[i].isBridge = true;\r\n                    this.bridges.push(this.edges[i]);\r\n                }\r\n                //add the edge back in\r\n                vertex1.edges.push(this.edges[i]);\r\n                vertex2.edges.push(this.edges[i]);\r\n            }\r\n        }\r\n        this.setState(this.state);\r\n    }\r\n\r\n    dfs(start, finish) {\r\n        //returns the shortest list of vertices connecting start to finish\r\n        let paths = [];\r\n        this.dfsHelper(start, [], paths, finish);\r\n\r\n        //return the shortest path in paths\r\n        if (paths.length === 0) return paths;\r\n        let shortestPath = paths[0];\r\n        for (let i = 0; i < paths.length; i++) {\r\n            if (paths[i].length < shortestPath.length) {\r\n                shortestPath = paths[i];\r\n            }\r\n        }\r\n        return shortestPath;\r\n    }\r\n\r\n    dfsHelper(currentVertex, path, paths, finish){\r\n        path.push(currentVertex);\r\n        if(currentVertex.id===finish.id){\r\n            paths.push(path);\r\n            return;\r\n        }\r\n        for(let i=0;i<currentVertex.edges.length;i++){\r\n            if(!path.find(v=>v.id===currentVertex.edges[i].vertex1.id)){\r\n                //continue search on vertex1\r\n                this.dfsHelper(currentVertex.edges[i].vertex1, path, paths, finish);\r\n            }\r\n            else if(!path.find(v=>v.id===currentVertex.edges[i].vertex2.id)){\r\n                //continue search on vertex2\r\n                this.dfsHelper(currentVertex.edges[i].vertex2, path, paths, finish);\r\n            }\r\n            //else do nothing for this edge\r\n        }\r\n    }\r\n\r\n    determineBipartite = () => {\r\n        if (this.vertices.length === 0) {\r\n            this.isBp = false;\r\n            return;\r\n        }\r\n        //try to 2 color the sketch\r\n        let visitedVertices = [];\r\n        this.isBp = true;\r\n        while (visitedVertices.length !== this.vertices.length) {\r\n            this.bpHelper(this.vertices[0], 1, visitedVertices);\r\n            if (this.isBp) {\r\n                const unseenVertex = this.findUnseenVertex(visitedVertices);\r\n                this.bpHelper(unseenVertex, 1, visitedVertices);\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    bpHelper(currentVertex, mColor, visitedVertices) {\r\n        if(!currentVertex) return;\r\n        //if it's already determined not bp, then return\r\n        if (this.isBp === false) {\r\n            return;\r\n        }\r\n        //if I've visited this vertex before, I must be trying to color it the same else bad\r\n        if (visitedVertices.length>0 && visitedVertices.find((vertex) => vertex.id === currentVertex.id)) {\r\n            if (currentVertex.mColor !== mColor) {\r\n                this.isBp = false;\r\n            }\r\n            return;\r\n        }\r\n\r\n        //color this vertex\r\n        currentVertex.mColor = mColor;\r\n        visitedVertices.push(currentVertex);\r\n        if (mColor === 1) mColor = 2;\r\n        else mColor = 1;\r\n\r\n        //recurse for all children\r\n        for (let i = 0; i < currentVertex.edges.length; i++) {\r\n            if(currentVertex.edges[i].isLoop)\r\n                continue;\r\n            const adj = this.determineAdjacentVertex(currentVertex, currentVertex.edges[i].vertex1, currentVertex.edges[i].vertex2);\r\n            this.bpHelper(adj, mColor, visitedVertices);\r\n        }\r\n    }\r\n\r\n    determineAdjacentVertex(currentVertex, vertex1, vertex2){\r\n        if(currentVertex.id===vertex1.id)\r\n            return vertex2;\r\n        else\r\n            return vertex1;\r\n    }\r\n\r\n    findUnseenVertex(visitedVertices) {\r\n        let unseenVertices = this.vertices.filter((vertex) => !visitedVertices.find((v) => v.id === vertex.id));\r\n        if (unseenVertices.length === 0) return null;\r\n        return unseenVertices[0];\r\n    }\r\n}","import React from 'react';\r\nimport './styles/main.css';\r\nimport Sketch from './Sketch';\r\n\r\n//The Sketchpad Page\r\nexport default class Sketchpad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mouseCTX = null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section onMouseMove={(e) => this.mouseCTX = e}>\r\n                <Sketch mouseMoveCTX={this.getMouseCTX.bind(this)} saveSketch={this.props.saveSketch}\r\n                        loadSketch={this.props.loadSketch}/>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    getMouseCTX() {\r\n        return this.mouseCTX;\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class SavedSketch extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <h1>{this.props.sketch.name}</h1>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport SavedSketch from \"./SavedSketch\";\r\n\r\nexport default class Sketchbook extends React.Component {\r\n  render() {\r\n    let sketches = document.cookie.split(';');\r\n    //get rid of not needed parts\r\n    let x = [];\r\n    for (let i = 0; i < sketches.length; i++) {\r\n      let y = sketches[i].split('=');\r\n      x.push(JSON.parse(y[1]));\r\n    }\r\n    return (\r\n        <div>\r\n          {x.map((sketch) => (\r\n              <div key={sketch.name} onClick={this.props.loadSketch.bind(this, sketch)}>\r\n                <SavedSketch sketch={sketch}/>\r\n              </div>\r\n          ))}\r\n          <button onClick={this.props.loadSketch.bind(this, null)}>Create Graph</button>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport Sketchpad from \"./Sketchpad\";\r\nimport Sketchbook from \"./Sketchbook\";\r\n\r\nclass App extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            currentView: 'sketchPad',\r\n            currentSketch: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        switch (this.state.currentView){\r\n            case \"sketchBook\":\r\n                return <Sketchbook loadSketch={this.loadSketch}/>\r\n            case 'sketchPad':\r\n                return <Sketchpad saveSketch={this.saveSketch}/>\r\n            default:\r\n                return <h1>Ooga Booga</h1>\r\n        }\r\n    }\r\n\r\n    loadSketch=(sketch)=> {\r\n      //change view\r\n      const state = this.state;\r\n      state.currentView = 'sketchPad';\r\n      document.cookie = 'loadSketch=' + JSON.stringify(sketch);\r\n      this.setState(state);\r\n    }\r\n\r\n    saveSketch=(sketch)=> {\r\n        //change view\r\n        const state = this.state;\r\n        state.currentView = 'sketchBook';\r\n\r\n        //create a cookie for the sketch\r\n        const s=JSON.parse(sketch);\r\n        const name=s.name;\r\n        document.cookie=name+'='+sketch;\r\n        this.setState(state);\r\n    }\r\n}\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}